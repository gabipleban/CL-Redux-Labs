{"ast":null,"code":"// Tu powinny się znaleźć odpowiednie importy\nimport { createStore as _createStore } from \"redux\";\nimport { withdrawMoney, depositMoney } from './redux/actions/bank';\nimport bankReducer from './redux/reducers/bank';\nvar bankApp = {\n  start: function start(rootElement) {\n    this.createUI(rootElement);\n    this.createStore();\n    this.collectRefs();\n    this.applyHandlers();\n  },\n  // Tej metody nie powinniśmy ruszać :)\n  // Tworzymy tu szablon UI\n  createUI: function createUI(rootElement) {\n    this.rootElement = rootElement;\n    this.rootElement.innerHTML = \"\\n      <div>\\n        <h1>Saldo:<span>0</span></h1>\\n        <div>\\n          $: <input type=\\\"number\\\" id=\\\"money\\\" />\\n          <button id=\\\"withdraw\\\">Wyp\\u0142a\\u0107</button>\\n          <button id=\\\"deposit\\\">Wp\\u0142a\\u0107</button>\\n        </div>\\n      </div>\\n    \";\n  },\n  // Tutaj zbieramy referencje do odpowiednich elementów\n  // Tej metody też nie trzeba zmieniać ;)\n  collectRefs: function collectRefs() {\n    this.depositEl = this.rootElement.querySelector(\"#deposit\");\n    this.withdrawEl = this.rootElement.querySelector(\"#withdraw\");\n    this.saldoEl = this.rootElement.querySelector(\"h1 span\");\n    this.inputEl = this.rootElement.querySelector(\"input\");\n  },\n  // W tej metodzie należy utworzyć nowy store\n  // Następnie zapisać się na zmiany i na każdą z nich\n  // zamienić wartość tekstu w elemencie `saldoEl` na wartość ze store + PLN\n  // np. this.saldoEl.innerText = `wartosc-ze-store PLN`\n  createStore: function createStore() {\n    var _this = this;\n\n    this.store = _createStore(bankReducer);\n    this.store.subscribe(function () {\n      _this.saldoEl.innerText = \"\".concat(_this.store.getState(), \" pln\");\n    });\n  },\n  // W tej metodzie należy podpiąć pod odpowiednie przyciski event handlery,\n  // które odpalą nam odpowiednie akcje\n  // Skorzystaj z elementów:\n  // this.withdrawEl\n  // this.depositEl\n  applyHandlers: function applyHandlers() {\n    var _this2 = this;\n\n    this.withdrawEl.addEventListener('click', function () {\n      _this2.store.dispatch(withdrawMoney(parseInt(_this2.inputEl.value)));\n    });\n    this.depositEl.addEventListener('click', function () {\n      _this2.store.dispatch(depositMoney(parseInt(_this2.inputEl.value)));\n    });\n  }\n};\nexport default bankApp;","map":{"version":3,"sources":["/Users/gabrielapleban/CL-Redux-Labs/lab.redux-podstawy/src/bankApp.js"],"names":["createStore","withdrawMoney","depositMoney","bankReducer","bankApp","start","rootElement","createUI","collectRefs","applyHandlers","innerHTML","depositEl","querySelector","withdrawEl","saldoEl","inputEl","store","subscribe","innerText","getState","addEventListener","dispatch","parseInt","value"],"mappings":"AAAA;AAEA,SAAQA,WAAW,IAAXA,YAAR,QAA0B,OAA1B;AACA,SAAQC,aAAR,EAAuBC,YAAvB,QAA4C,sBAA5C;AACA,OAAOC,WAAP,MAAyB,uBAAzB;AACA,IAAMC,OAAO,GAAG;AAEdC,EAAAA,KAFc,iBAERC,WAFQ,EAEK;AACjB,SAAKC,QAAL,CAAcD,WAAd;AACA,SAAKN,WAAL;AACA,SAAKQ,WAAL;AACA,SAAKC,aAAL;AACD,GAPa;AASd;AACA;AACAF,EAAAA,QAXc,oBAWLD,WAXK,EAWQ;AACpB,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKA,WAAL,CAAiBI,SAAjB;AAUD,GAvBa;AAyBd;AACA;AACAF,EAAAA,WA3Bc,yBA2BA;AACZ,SAAKG,SAAL,GAAiB,KAAKL,WAAL,CAAiBM,aAAjB,CAA+B,UAA/B,CAAjB;AACA,SAAKC,UAAL,GAAkB,KAAKP,WAAL,CAAiBM,aAAjB,CAA+B,WAA/B,CAAlB;AACA,SAAKE,OAAL,GAAe,KAAKR,WAAL,CAAiBM,aAAjB,CAA+B,SAA/B,CAAf;AACA,SAAKG,OAAL,GAAe,KAAKT,WAAL,CAAiBM,aAAjB,CAA+B,OAA/B,CAAf;AACD,GAhCa;AAkCd;AACA;AACA;AACA;AACAZ,EAAAA,WAtCc,yBAsCA;AAAA;;AACZ,SAAKgB,KAAL,GAAahB,YAAW,CAACG,WAAD,CAAxB;AACA,SAAKa,KAAL,CAAWC,SAAX,CAAqB,YAAK;AAAE,MAAA,KAAI,CAACH,OAAL,CAAaI,SAAb,aAA4B,KAAI,CAACF,KAAL,CAAWG,QAAX,EAA5B;AAAwD,KAApF;AAED,GA1Ca;AA4Cd;AACA;AACA;AACA;AACA;AACAV,EAAAA,aAjDc,2BAiDE;AAAA;;AACd,SAAKI,UAAL,CAAgBO,gBAAhB,CAAiC,OAAjC,EAA0C,YAAK;AAC7C,MAAA,MAAI,CAACJ,KAAL,CAAWK,QAAX,CAAoBpB,aAAa,CAACqB,QAAQ,CAAC,MAAI,CAACP,OAAL,CAAaQ,KAAd,CAAT,CAAjC;AACD,KAFD;AAIA,SAAKZ,SAAL,CAAeS,gBAAf,CAAgC,OAAhC,EAAyC,YAAK;AAC5C,MAAA,MAAI,CAACJ,KAAL,CAAWK,QAAX,CAAoBnB,YAAY,CAACoB,QAAQ,CAAC,MAAI,CAACP,OAAL,CAAaQ,KAAd,CAAT,CAAhC;AACD,KAFD;AAID;AA1Da,CAAhB;AA6DA,eAAenB,OAAf","sourcesContent":["// Tu powinny się znaleźć odpowiednie importy\n\nimport {createStore} from \"redux\";\nimport {withdrawMoney, depositMoney}  from  './redux/actions/bank';\nimport bankReducer from  './redux/reducers/bank'\nconst bankApp = {\n\n  start(rootElement) {\n    this.createUI(rootElement);\n    this.createStore();\n    this.collectRefs();\n    this.applyHandlers();\n  },\n\n  // Tej metody nie powinniśmy ruszać :)\n  // Tworzymy tu szablon UI\n  createUI(rootElement) {\n    this.rootElement = rootElement;\n    this.rootElement.innerHTML = `\n      <div>\n        <h1>Saldo:<span>0</span></h1>\n        <div>\n          $: <input type=\"number\" id=\"money\" />\n          <button id=\"withdraw\">Wypłać</button>\n          <button id=\"deposit\">Wpłać</button>\n        </div>\n      </div>\n    `;\n  },\n\n  // Tutaj zbieramy referencje do odpowiednich elementów\n  // Tej metody też nie trzeba zmieniać ;)\n  collectRefs() {\n    this.depositEl = this.rootElement.querySelector(\"#deposit\");\n    this.withdrawEl = this.rootElement.querySelector(\"#withdraw\");\n    this.saldoEl = this.rootElement.querySelector(\"h1 span\");\n    this.inputEl = this.rootElement.querySelector(\"input\");\n  },\n\n  // W tej metodzie należy utworzyć nowy store\n  // Następnie zapisać się na zmiany i na każdą z nich\n  // zamienić wartość tekstu w elemencie `saldoEl` na wartość ze store + PLN\n  // np. this.saldoEl.innerText = `wartosc-ze-store PLN`\n  createStore() {\n    this.store = createStore(bankReducer);\n    this.store.subscribe(() =>{ this.saldoEl.innerText = `${this.store.getState()} pln`})\n\n  },\n\n  // W tej metodzie należy podpiąć pod odpowiednie przyciski event handlery,\n  // które odpalą nam odpowiednie akcje\n  // Skorzystaj z elementów:\n  // this.withdrawEl\n  // this.depositEl\n  applyHandlers() {\n    this.withdrawEl.addEventListener('click', ()=> {\n      this.store.dispatch(withdrawMoney(parseInt(this.inputEl.value)))\n    })\n\n    this.depositEl.addEventListener('click', ()=> {\n      this.store.dispatch(depositMoney(parseInt(this.inputEl.value)))\n    })\n\n  }\n};\n\nexport default bankApp;"]},"metadata":{},"sourceType":"module"}