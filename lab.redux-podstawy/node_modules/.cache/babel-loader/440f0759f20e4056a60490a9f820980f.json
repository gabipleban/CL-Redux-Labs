{"ast":null,"code":"// Tu powinny się znaleźć odpowiednie importy\nvar bankApp = {\n  start: function start(rootElement) {\n    this.createUI(rootElement);\n    this.createStore();\n    this.collectRefs();\n    this.applyHandlers();\n  },\n  // Tej metody nie powinniśmy ruszać :)\n  // Tworzymy tu szablon UI\n  createUI: function createUI(rootElement) {\n    this.rootElement = rootElement;\n    this.rootElement.innerHTML = \"\\n      <div>\\n        <h1>Saldo:<span>0</span></h1>\\n\\n        <div>\\n          $: <input type=\\\"number\\\" id=\\\"money\\\" />\\n          <button id=\\\"withdraw\\\">Wyp\\u0142a\\u0107</button>\\n          <button id=\\\"deposit\\\">Wp\\u0142a\\u0107</button>\\n        </div>\\n      </div>\\n    \";\n  },\n  // Tutaj zbieramy referencje do odpowiednich elementów\n  // Tej metody też nie trzeba zmieniać ;)\n  collectRefs: function collectRefs() {\n    this.depositEl = this.rootElement.querySelector(\"#deposit\");\n    this.withdrawEl = this.rootElement.querySelector(\"#withdraw\");\n    this.saldoEl = this.rootElement.querySelector(\"h1 span\");\n    this.inputEl = this.rootElement.querySelector(\"input\");\n  },\n  // W tej metodzie należy utworzyć nowy store\n  // Następnie zapisać się na zmiany i na każdą z nich\n  // zamienić wartość tekstu w elemencie `saldoEl` na wartość ze store + PLN\n  // np. this.saldoEl.innerText = `wartosc-ze-store PLN`\n  createStore: function createStore() {},\n  // W tej metodzie należy podpiąć pod odpowiednie przyciski event handlery,\n  // które odpalą nam odpowiednie akcje\n  // Skorzystaj z elementów:\n  // this.withdrawEl\n  // this.depositEl\n  applyHandlers: function applyHandlers() {}\n};\nexport default bankApp;","map":{"version":3,"sources":["/Users/gabrielapleban/CL-Redux-Labs/lab.redux-podstawy/src/bankApp.js"],"names":["bankApp","start","rootElement","createUI","createStore","collectRefs","applyHandlers","innerHTML","depositEl","querySelector","withdrawEl","saldoEl","inputEl"],"mappings":"AAAA;AAEA,IAAMA,OAAO,GAAG;AAEdC,EAAAA,KAFc,iBAERC,WAFQ,EAEK;AACjB,SAAKC,QAAL,CAAcD,WAAd;AACA,SAAKE,WAAL;AACA,SAAKC,WAAL;AACA,SAAKC,aAAL;AACD,GAPa;AASd;AACA;AACAH,EAAAA,QAXc,oBAWLD,WAXK,EAWQ;AACpB,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKA,WAAL,CAAiBK,SAAjB;AAWD,GAxBa;AA0Bd;AACA;AACAF,EAAAA,WA5Bc,yBA4BA;AACZ,SAAKG,SAAL,GAAiB,KAAKN,WAAL,CAAiBO,aAAjB,CAA+B,UAA/B,CAAjB;AACA,SAAKC,UAAL,GAAkB,KAAKR,WAAL,CAAiBO,aAAjB,CAA+B,WAA/B,CAAlB;AACA,SAAKE,OAAL,GAAe,KAAKT,WAAL,CAAiBO,aAAjB,CAA+B,SAA/B,CAAf;AACA,SAAKG,OAAL,GAAe,KAAKV,WAAL,CAAiBO,aAAjB,CAA+B,OAA/B,CAAf;AACD,GAjCa;AAmCd;AACA;AACA;AACA;AACAL,EAAAA,WAvCc,yBAuCA,CAEb,CAzCa;AA2Cd;AACA;AACA;AACA;AACA;AACAE,EAAAA,aAhDc,2BAgDE,CAEf;AAlDa,CAAhB;AAqDA,eAAeN,OAAf","sourcesContent":["// Tu powinny się znaleźć odpowiednie importy\n\nconst bankApp = {\n\n  start(rootElement) {\n    this.createUI(rootElement);\n    this.createStore();\n    this.collectRefs();\n    this.applyHandlers();\n  },\n\n  // Tej metody nie powinniśmy ruszać :)\n  // Tworzymy tu szablon UI\n  createUI(rootElement) {\n    this.rootElement = rootElement;\n    this.rootElement.innerHTML = `\n      <div>\n        <h1>Saldo:<span>0</span></h1>\n\n        <div>\n          $: <input type=\"number\" id=\"money\" />\n          <button id=\"withdraw\">Wypłać</button>\n          <button id=\"deposit\">Wpłać</button>\n        </div>\n      </div>\n    `;\n  },\n\n  // Tutaj zbieramy referencje do odpowiednich elementów\n  // Tej metody też nie trzeba zmieniać ;)\n  collectRefs() {\n    this.depositEl = this.rootElement.querySelector(\"#deposit\");\n    this.withdrawEl = this.rootElement.querySelector(\"#withdraw\");\n    this.saldoEl = this.rootElement.querySelector(\"h1 span\");\n    this.inputEl = this.rootElement.querySelector(\"input\");\n  },\n\n  // W tej metodzie należy utworzyć nowy store\n  // Następnie zapisać się na zmiany i na każdą z nich\n  // zamienić wartość tekstu w elemencie `saldoEl` na wartość ze store + PLN\n  // np. this.saldoEl.innerText = `wartosc-ze-store PLN`\n  createStore() {\n\n  },\n\n  // W tej metodzie należy podpiąć pod odpowiednie przyciski event handlery,\n  // które odpalą nam odpowiednie akcje\n  // Skorzystaj z elementów:\n  // this.withdrawEl\n  // this.depositEl\n  applyHandlers() {\n\n  }\n};\n\nexport default bankApp;\n"]},"metadata":{},"sourceType":"module"}